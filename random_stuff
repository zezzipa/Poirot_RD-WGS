#Make a virtual envirionment and set it up
virtualenv venv -p python3.8
source venv/bin/activate
#
pip install hydra-genetics
pip install snakemake
pip install -r requirements.txt
module load singularity
module load slurm-drmaa
module load bcbio-nextgen
pip install --upgrade snakemake
pip install drmaa
#
#vim /projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/venv/lib/python3.8/site-packages/hydra_genetics/utils/units.py
#rm [str]

#Open your virtual environment
source venv/bin/activate

# Make a new line based on hydra genetics by:
# hydra-genetics create-module

#To run the pipeline with slurm or without slurm
# -s where is the Snakefile, -d which is the working directory
# units.tsv and sample.tsv should be in working directory
snakemake --profile profiles/slurm/ -s workflow/Snakefile -d config/
snakemake -n -s workflow/Snakefile -d config/ --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "
snakemake --core 1 -s ../workflow/Snakefile --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "


snakemake --cores 2 -s /projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/Poirot_test/workflow/Snakefile --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "


snakemake -n -s /projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/Poirot_RD-WGS/workflow/Snakefile --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "

#rule NAME:
#    input: "path/to/inputfile", "path/to/other/inputfile"
#    output: "path/to/outputfile", "path/to/another/outputfile"
#    shell: "somecommand {input} {output}"



snakemake -np call/all.vcf
snakemake --cores 1 call/all.vcf
snakemake --dag call/all.vcf | dot -Tsvg > dag.svg



# rule deepvariant_germline:
#     input:
#         ref="/data/ref_genomes/GRCh38/broad/Homo_sapiens_assembly38.fasta",
#         fq1="/projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/NA12878_chr21.R1.fq",
#         fq2="/projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/NA12878_chr21.R2.fq",
#     output:
#         bam="/projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/NA12878_chr21.bam",
#         vcf="/projects/wp3/nobackup/Workspace/WGS_pipeline_GPU_test/NA12878.vcf",
#     log:
#         "NA12878.pb.fq2vcf.log",
#     params:
#         n=2,
#         dir="/scratch/wp3/GPU",
#     conda:
#         "../envs/parabricks.yaml",
#     shell: "pbrun deepvariant_germline --ref {input.ref} --in-fq {input.fq1} {input.fq2} \
#         --out-bam {output.bam} --out-variants {output.vcf} \
#         --tmp-dir {params.dir} --num-gpus {params.n} &> {log}"


rule bwa_map:
    input:
        ref=config['genomic_ref'],
        fq1="/projects/wp3/nobackup/WGS/MGI/V300043112_WGS_20201023/fastq/{sample}_R1.fastq.gz",
        fq2="/projects/wp3/nobackup/WGS/MGI/V300043112_WGS_20201023/fastq/{sample}_R2.fastq.gz"
    output:
        "mapped_reads/{sample}.bam"
    shell:
        "bwa mem {input.ref} {input.fq1} {input.fq2} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample}.bam "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"


rule deepvariant:
    input:
        ref = config['genomic_ref'],
        reads = "sorted_reads/{sample}.bam"
    output:
        ovcf = 'deepvariant/{sample}.vcf.gz',
        ogvcf = 'deepvariant/{sample}.g.vcf.gz',
        ird = directory('intermediate/{sample}')
    threads:
        8
    singularity:
        config['images']['deepvariant']
    log:
        '{sample}/log.txt'
    shell:
        "/opt/deepvariant/bin/run_deepvariant \
        --model_type=WGS \
        --ref={input.ref} \
        --reads={input.reads} \
        --output_vcf={output.ovcf} \
        --output_gvcf={output.ogvcf} \
        --intermediate_results_dir {output.ird} \
        --num_shards={threads} > {log} 2>&1"
